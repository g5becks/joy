// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/runtime/runtime.go
// macro/raw.go
// macro/rawfile.go
// macro/rewrite.go
// macro/runtime.go
// stdlib/encoding/json/json.go
// stdlib/errors/errors.go
// stdlib/fmt/fmt.go
// stdlib/net/url/url.go
// stdlib/strconv/strconv.go
// stdlib/strings/strings.go
// stdlib/time/time.go

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalRuntimeRuntimeGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xcd\x6e\xe3\x36\x10\x3e\x8b\x4f\x31\xdd\x43\x97\x5a\x18\xf2\xf6\x6a\xd4\xbd\x74\x5b\xa0\x05\xb6\x29\x36\xbd\x14\x41\xd0\xd0\xf4\x28\xa2\x23\x91\x02\x45\x39\x30\x02\xbf\x7b\x31\x43\xea\xc7\xb1\xd7\xd9\xbd\x51\xf3\xfb\xcd\xcc\x37\xa4\x5a\xa5\x9f\xd4\x23\x82\xef\x6d\x30\x0d\x0a\x61\x9a\xd6\xf9\x00\xef\x1e\x4d\xa8\xfa\x4d\xa1\x5d\xb3\x6c\x54\x08\x15\x3e\x37\x3d\xd6\x35\xfa\xe5\xce\x1d\x96\x8d\xd2\xde\xbd\x13\x62\xb9\x84\x5f\x2b\x65\xa1\x0b\xbe\xd7\x41\x84\x43\x8b\x73\x01\xbc\x88\x4c\xab\x56\x69\x13\x0e\x60\x6c\x10\xd9\x5e\xd5\x3d\x76\x00\x70\x77\x6f\x6c\x40\x5f\x2a\x8d\x2f\x47\x91\x75\x68\xb7\x24\x7e\x2d\xf7\xa8\xf7\x97\xe4\xba\x76\x1d\x6e\x01\x60\xe3\x5c\x2d\x8e\x22\xa6\xa6\x28\xb3\xd4\x9c\x0c\x00\x4e\x3c\x5b\xef\x1a\xd3\xe1\x89\xf0\xc8\x95\x7c\xc2\x12\xbd\xc7\x2d\x94\x96\x3e\xff\xb9\xf9\x74\xb3\x02\x5d\xa3\xb2\x7d\x2b\xca\xde\xea\xd1\x42\xe6\x73\x77\x4a\xc5\x0d\x29\xbe\xa8\x67\xf9\x20\x4c\x09\xf2\x07\x19\x2a\xd3\x81\xb1\x5d\x50\x56\xa3\x2b\x47\xdf\x3c\x07\x8f\xa1\xf7\x16\x2c\x3e\xcf\x22\x8a\xbd\xf2\xd0\x61\x5d\xc2\x1a\xc8\x57\xb0\xa0\x85\x35\xdb\xfd\x1d\x51\x4b\x82\x11\x8c\xb3\xd2\x63\xe7\xea\x3d\x2e\xc0\xe3\x0e\x75\xc8\x09\x04\x79\x17\x49\x01\x6b\x48\xa7\x51\x4e\x76\x2c\xa6\x83\x38\xe6\x42\xb0\x22\x54\x68\x61\x0d\x2d\x1f\x8a\x8d\xb1\x5b\xd9\xe6\x51\xa5\x55\xd0\x15\xeb\xf8\x34\x2a\x1f\x72\x9a\x0c\x17\x31\x2b\x9c\x5c\x1e\xf2\xd4\x4c\x62\x81\xc5\x1a\x06\xc0\xb1\x81\x49\x2a\xe7\xa4\xc8\xe1\x03\x53\xe6\x65\x8c\xf9\x23\x7d\xbf\x88\x6c\xe4\xce\x0a\x86\xd3\x42\x64\xc3\xb8\x6e\x69\xd8\xce\x42\xa8\x10\x74\x8c\x1b\x93\x48\x1d\x23\xe6\x6c\x22\x23\x0b\x66\xf3\x3a\x1b\x9e\x29\x41\x17\x89\x51\x94\xf6\xbc\xb4\xd4\xfe\xd4\x44\x49\x13\xf9\xcd\x7b\xe7\xe5\xfb\x2e\xa1\x50\x90\x02\x24\x28\xef\xf3\x9c\xba\x74\x14\x22\x5b\x2e\x81\x68\x0c\x2d\xda\xad\xb1\x8f\x9c\xaf\x46\x2b\x75\xc1\xec\xce\xe1\x17\xf8\x98\xf2\xea\x3d\xac\xd6\x90\x14\x77\x1f\xef\x45\x96\xfd\xc7\x23\xd3\x7b\x6a\x47\x94\xc3\x64\xf1\xd3\x8a\x4c\x66\x40\x49\x3c\x50\x20\x56\xce\x30\xae\x96\x14\x8d\x4f\xe0\x3a\xd7\x80\xb1\xb0\xe9\xcb\x12\xfd\x0c\x70\x5c\xdf\x1c\x7e\xa6\x86\x0d\x33\xe4\x49\x25\x15\xac\x41\xb5\x54\xe8\x68\xbc\x80\x08\xe3\xbb\x41\x58\x77\xd2\xb6\x05\x6c\x6a\xa7\x9f\x58\x15\x57\xd3\x9b\xc7\x2a\x80\x75\xcf\x10\x77\xad\xe3\x4d\xa1\x81\xc8\xa2\x28\x72\xb6\xec\x2a\xd7\xd7\x5b\xd8\x20\x94\xc6\x22\x94\xce\x47\x63\xad\x3a\x5c\xc0\xae\xef\x02\x28\x0b\xbf\xff\xfb\xc7\x74\x31\xac\xd6\xf3\xad\xcc\x74\x11\xef\xa6\x59\x61\x2c\x58\x70\x26\xaa\x9d\xeb\x5b\x01\xc4\x42\x17\x22\x1b\x42\xad\x20\x1d\x88\xb5\xd3\xca\x24\x61\xa2\xf1\x17\xaa\x51\x45\xdf\xd7\xfc\x25\xdd\xf9\x5d\xb3\x5c\x42\x6a\xf6\xb5\x11\x0d\xa4\x8a\xf4\x67\x56\x45\xd5\x44\xab\x98\xf3\x64\x78\xa3\x51\x64\xd6\xdb\x13\x9b\x38\x96\xc6\xd6\x5b\x9e\xd3\x30\x36\xee\x52\x37\xc3\xc7\xdf\x13\x3c\xde\x1f\x46\xc7\x8a\x09\x1c\x7d\x32\xb6\xa1\xfd\x83\x05\x21\x13\xd9\xd9\xd2\x66\x27\x37\x91\xdd\x16\xed\x9b\x3b\x7b\x71\x63\xbf\x99\xa6\x5c\xf0\x95\xac\x73\xd3\xb7\x43\xb2\xf3\x59\x33\x23\xc2\xef\xbb\xa1\x2e\x6e\xd2\xb0\x8b\x69\x87\xbe\xca\xf5\xe1\x82\x19\xb9\xce\x82\xc5\xc0\xd9\xaf\x91\xf8\x33\xd9\xfb\x89\xa8\xf1\x39\x7e\x2d\x25\xe8\xb7\x18\xe4\x13\x1e\xe8\x95\xe6\xa5\xbe\x70\x3b\x47\x37\x91\xfd\x79\x7b\xf3\x97\xcc\xa1\x51\xed\x5d\xb4\xbe\x7f\xf5\x66\x73\x92\x26\x26\x99\x5e\x7d\xb7\xd9\x5d\xf1\x89\x60\x41\x7b\x54\x01\x3b\x50\x7c\x67\x34\x2a\x3d\xf0\x9f\x55\x2b\x07\x00\xf3\x07\x29\x26\x89\x11\xe2\x8e\x36\xf0\x21\x0a\xe9\x95\xf9\xc6\x92\xf8\x47\xa1\x70\x9b\xdd\xdd\x13\x1e\xee\xa7\x05\x1c\xa6\x79\x31\xfa\xd5\x2e\xcc\x30\x72\x60\x71\x14\xff\x07\x00\x00\xff\xff\x12\x46\x68\x69\xd2\x09\x00\x00")

func internalRuntimeRuntimeGoBytes() ([]byte, error) {
	return bindataRead(
		_internalRuntimeRuntimeGo,
		"internal/runtime/runtime.go",
	)
}

func internalRuntimeRuntimeGo() (*asset, error) {
	bytes, err := internalRuntimeRuntimeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/runtime/runtime.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x7b, 0xf7, 0x49, 0x22, 0x21, 0x11, 0x46, 0x73, 0x94, 0x39, 0x48, 0x29, 0x3, 0xd6, 0xa, 0x5b, 0xd0, 0x45, 0xfd, 0xc8, 0xfc, 0xec, 0x3a, 0x4d, 0xd, 0x38, 0xbc, 0xd, 0x98, 0x22, 0x5b}}
	return a, nil
}

var _macroRawGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x41\x0a\x83\x40\x0c\x46\xe1\x75\x73\x8a\x1f\x57\x2d\xc8\xb8\xef\x11\xba\xb4\x27\x08\x43\x94\xb4\x9a\x91\x64\xac\x05\xf1\xee\xc5\x5d\x97\x8f\xc7\xb7\x70\x7e\xf3\x28\x98\x39\x7b\x21\xea\x3a\xf4\xbc\x41\x6d\x52\x93\x00\xe3\xf1\x84\x7c\x17\x97\x08\x2d\x76\xee\x57\xdc\x9b\x9e\xb7\xb6\xcc\x5a\x1b\x1a\x56\xcb\xa7\xb8\x86\x67\x44\x75\xb5\xb1\xc5\x87\x3d\x90\x52\x52\xab\xe2\x03\x67\xd9\x8f\x1b\xfe\x02\x3b\x5d\x5c\xea\xea\x06\xd3\x89\x0e\xfa\x05\x00\x00\xff\xff\xf6\x6c\xce\x61\x85\x00\x00\x00")

func macroRawGoBytes() ([]byte, error) {
	return bindataRead(
		_macroRawGo,
		"macro/raw.go",
	)
}

func macroRawGo() (*asset, error) {
	bytes, err := macroRawGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macro/raw.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0x66, 0x48, 0x17, 0x7c, 0x5a, 0x8b, 0xe8, 0x98, 0x1c, 0xc8, 0x18, 0x77, 0x77, 0x32, 0x8e, 0xac, 0x4a, 0x8e, 0x52, 0xef, 0x63, 0xe5, 0x25, 0x5, 0xb8, 0x94, 0x43, 0x19, 0x3b, 0x6a, 0x10}}
	return a, nil
}

var _macroRawfileGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xb1\x0d\xc2\x40\x0c\x05\xd0\x1a\x4f\xf1\x95\x0a\x24\xa4\xf4\x0c\x40\x41\xcb\x04\xd6\xc9\x17\x0c\x8e\x13\xf9\x9c\x2a\xca\xee\xe8\x52\xbf\xb7\x72\xf9\xf1\x24\x98\xb9\xc4\x42\x34\x8e\x78\xaa\x09\xd4\x4d\x5d\x1a\x18\xaf\x37\xaa\x9a\x74\xf9\xb6\xc7\xd0\xf5\xbe\xcc\x9a\x03\xd5\xcd\xcb\xb9\xaf\x3d\xac\x9c\x1f\xb4\x0c\xf5\xe9\x06\xf5\x94\xa8\x5c\x64\x3f\xb0\xd3\x25\x24\xb7\x70\xb8\x1a\x1d\xf4\x0f\x00\x00\xff\xff\x95\xdc\x11\x78\x72\x00\x00\x00")

func macroRawfileGoBytes() ([]byte, error) {
	return bindataRead(
		_macroRawfileGo,
		"macro/rawfile.go",
	)
}

func macroRawfileGo() (*asset, error) {
	bytes, err := macroRawfileGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macro/rawfile.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0xb7, 0x60, 0x5d, 0x68, 0xc9, 0xb3, 0x88, 0x41, 0x27, 0xc5, 0x92, 0x3f, 0x9a, 0x8d, 0xa0, 0xe8, 0x48, 0xf8, 0x17, 0x45, 0x87, 0x63, 0xcd, 0xd8, 0xe, 0xea, 0xd1, 0x20, 0x26, 0x65, 0xaf}}
	return a, nil
}

var _macroRewriteGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x41\xae\x82\x40\x10\x45\xd1\xf1\xef\x55\xbc\xf4\xe8\x9b\x10\x98\xbb\x0c\x77\x50\x36\x0f\x2c\x85\x82\x54\x37\x6a\x42\xd8\xbb\x21\xd1\x84\xe1\x1d\xdc\x33\x4b\x7a\x48\x4f\x8c\x92\x7c\x0a\xa1\x69\x70\xe1\xcb\xb5\x10\x62\xe0\x7b\x76\xe6\xac\x93\xc1\x39\x0f\x92\xd4\x7a\x94\x1b\xf1\x14\x57\xb9\x0e\xcc\x90\x0c\x23\x5b\xb6\xfb\x7a\xcf\xe7\xf8\xdd\xab\x69\xd4\x12\x43\xb7\x58\xfa\x89\xff\x3b\x87\x5c\x5c\xad\xaf\x0e\x44\x5d\xd7\x6a\x85\xde\x49\xe2\xba\x9d\x70\x08\xac\xe1\xcf\x59\x16\x37\xc4\x18\xb6\xf0\x09\x00\x00\xff\xff\xf8\x63\xd0\xc5\xae\x00\x00\x00")

func macroRewriteGoBytes() ([]byte, error) {
	return bindataRead(
		_macroRewriteGo,
		"macro/rewrite.go",
	)
}

func macroRewriteGo() (*asset, error) {
	bytes, err := macroRewriteGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macro/rewrite.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x83, 0x83, 0x1d, 0xa8, 0xaa, 0x6f, 0x99, 0xaa, 0xe1, 0xad, 0xd1, 0x35, 0x52, 0x66, 0xda, 0xe0, 0x93, 0xe3, 0x24, 0xeb, 0x30, 0x45, 0xe6, 0x59, 0xcd, 0x94, 0x17, 0x90, 0xfc, 0x9c, 0x90}}
	return a, nil
}

var _macroRuntimeGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x41\x0a\x02\x31\x0c\x40\xd1\xb5\x39\x45\x98\x95\x82\x74\xf6\x1e\xc3\x1b\x84\x98\x0c\x51\x9b\x91\x34\x5d\x95\xde\x5d\x04\x67\xf9\x3f\xef\x43\xfc\xa2\x4d\xb0\x12\xc7\x0e\xb0\xae\x78\xef\x9e\x56\x05\xd5\x7f\xf5\x6c\xb7\xe5\x7f\xae\x7b\xb5\x5c\x40\xbb\xf3\x81\xce\x0f\xd1\x86\xa5\x94\x96\x61\xbe\x5d\xd0\x3c\x25\x94\x58\xc6\xc4\x01\xa7\x90\xec\xe1\xe8\xf6\x86\x09\xdf\x00\x00\x00\xff\xff\x36\x56\xba\xa4\x6b\x00\x00\x00")

func macroRuntimeGoBytes() ([]byte, error) {
	return bindataRead(
		_macroRuntimeGo,
		"macro/runtime.go",
	)
}

func macroRuntimeGo() (*asset, error) {
	bytes, err := macroRuntimeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "macro/runtime.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xc2, 0x9b, 0x19, 0x6a, 0x75, 0x4b, 0xdf, 0x31, 0x27, 0x1f, 0x3d, 0x8e, 0x67, 0xfd, 0xdc, 0x7b, 0x22, 0xa3, 0xa7, 0x88, 0xfa, 0x89, 0xc6, 0x6e, 0x35, 0xa0, 0x27, 0xa3, 0x7b, 0x2d, 0x45}}
	return a, nil
}

var _stdlibEncodingJsonJsonGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4f\x8b\xdb\x30\x10\x05\xf0\xf3\xea\x53\x3c\x96\xa5\x48\x60\x62\xda\x63\x61\x6f\x3d\x15\xda\x40\xff\x9c\x82\x61\x15\x75\x92\x28\x96\xa5\x30\x1a\x79\x31\xc1\xdf\xbd\xc8\x5b\xb7\xa1\xb4\x7b\xf1\xe5\xbd\x91\x67\x7e\x17\xeb\x7a\x7b\x24\x9c\x73\x8a\x4a\xf9\xe1\x92\x58\x70\x7f\xf4\x72\x2a\xfb\x8d\x4b\x43\x3b\x58\x91\x13\x3d\x0f\x85\x42\x20\x6e\xcf\x69\x6a\x07\xeb\x38\xdd\x2b\xd5\xb6\xf8\x64\x39\x9f\x6c\x80\x45\x16\x2e\x4e\xe0\xa3\x24\x7c\xfc\xba\xfd\xac\x0e\x25\xba\x35\xd7\x63\x0d\x88\x0f\xd6\xd1\x75\x36\xd0\xbb\x6e\x3f\x09\x35\x20\xe6\xc4\x06\x57\x75\xb7\x3c\xba\xf9\x42\xcf\xec\x85\xf4\x93\xae\xe3\xe2\x53\xd4\x63\x8d\x01\xe1\x09\x57\x30\x49\xe1\x88\xdd\xf2\x8b\x4d\x16\xf6\xf1\xe8\x0f\x93\x1e\x4d\x83\x58\x42\x40\x07\xcc\x0a\x70\x56\xdc\x09\x9a\xcc\xed\x4c\x2d\x34\x20\x74\x98\xd5\x6c\xf4\xc3\x5b\xf3\xd4\x60\x34\xea\xee\x57\x23\xfa\xd0\xd4\x8f\x9a\x97\xdb\xbe\xc7\xe1\xff\xd7\xb5\x2d\xbe\x6d\x3f\x6c\xdf\xc3\x31\x59\x21\xbc\x41\xc9\x84\xb4\x3f\x93\x93\x8d\xcd\xd9\x1f\x23\xb8\x44\xf1\x03\xbd\x48\xfc\x7e\x4d\xff\xb0\x62\xb1\x02\xfc\x05\xb3\x78\xbc\xca\x51\xa7\xeb\xd6\x7f\x50\x14\x00\x8c\x96\x91\xf0\xf8\xe2\x72\xb1\x9c\x69\x69\x9a\x25\x3c\x24\x86\xae\x8d\x1e\x3e\x22\x19\x8c\xbb\xbe\xc3\x23\xd2\xae\xef\x96\xc2\x0a\x50\x42\x50\xc0\xfc\x2f\x3e\x5a\xd1\x1a\x3c\xbc\xab\x70\xeb\x22\xb7\x7c\x6a\x56\x3f\x03\x00\x00\xff\xff\x70\xa4\x2f\x0c\x51\x02\x00\x00")

func stdlibEncodingJsonJsonGoBytes() ([]byte, error) {
	return bindataRead(
		_stdlibEncodingJsonJsonGo,
		"stdlib/encoding/json/json.go",
	)
}

func stdlibEncodingJsonJsonGo() (*asset, error) {
	bytes, err := stdlibEncodingJsonJsonGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/encoding/json/json.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xda, 0xa9, 0x45, 0xb1, 0x3f, 0x27, 0x55, 0x58, 0xd4, 0x90, 0x6a, 0x56, 0xe7, 0x1e, 0x9e, 0x4, 0x6d, 0x28, 0x10, 0x15, 0x7d, 0xe6, 0xfc, 0x38, 0x78, 0xb7, 0x32, 0x13, 0x5a, 0x3, 0xa}}
	return a, nil
}

var _stdlibErrorsErrorsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\x41\x0a\xc2\x30\x10\x45\xd7\x9d\x53\x0c\xc1\x45\x0b\xd2\xe0\x21\xdc\xba\xf0\x06\x31\x4c\xdb\x68\x27\x53\xa6\x13\xa2\x88\x77\x97\x56\x97\x9f\xf7\xdf\x5b\x42\x7c\x84\x91\x90\x54\x45\x57\x80\xc4\x8b\xa8\xa1\x1b\x93\x4d\xe5\xd6\x47\x61\xcf\xc1\x6c\xa2\xca\x85\xe6\x99\xd4\xdf\xe5\xe5\x39\x44\x15\x07\xe0\x3d\x5e\xa8\xfe\x64\x1c\x54\x18\x8d\x9e\x06\x43\xc9\x71\x03\xed\xb6\x70\x35\x4d\x79\xec\xfe\xaf\x37\x34\xbb\xdd\x5f\xa9\x6a\x32\x6a\x5d\xa6\x8a\xe7\x8d\xb5\x87\x53\xe7\x8e\x7b\xa2\x83\x46\xc9\x8a\x66\xcc\x69\x86\x0f\x7c\x03\x00\x00\xff\xff\x68\x8f\x77\xd1\xa7\x00\x00\x00")

func stdlibErrorsErrorsGoBytes() ([]byte, error) {
	return bindataRead(
		_stdlibErrorsErrorsGo,
		"stdlib/errors/errors.go",
	)
}

func stdlibErrorsErrorsGo() (*asset, error) {
	bytes, err := stdlibErrorsErrorsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/errors/errors.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0xf1, 0x21, 0x21, 0x8d, 0xea, 0x57, 0xbe, 0x83, 0x45, 0x8d, 0xbc, 0x1b, 0xfd, 0xdd, 0xd6, 0x47, 0x95, 0xde, 0x1e, 0xe7, 0x9a, 0xdb, 0x71, 0x13, 0x4, 0x2e, 0xca, 0x65, 0x40, 0xb6, 0xa2}}
	return a, nil
}

var _stdlibFmtFmtGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x31\x6f\xdc\x3c\x0c\x86\xe7\xf8\x57\xbc\x38\x04\xf8\xee\x80\x83\xfc\xa5\x63\xb7\x0e\x45\x91\xa5\x0d\x9a\x6c\x45\x07\x9e\x4c\xd9\x6a\x65\xd2\x90\x28\x1c\x0e\x41\xfe\x7b\x21\xdf\x25\x4d\x81\x0e\x1d\xda\xd1\xa2\xf9\x90\x7c\xc8\x85\xfc\x77\x1a\x19\x61\xb6\xae\x8b\xf3\xa2\xd9\xb0\x19\xa3\x4d\xf5\xe0\xbc\xce\xfd\x4c\x66\x13\x1f\xe7\xca\x29\x71\xee\xbf\xe9\xa9\x9f\xc9\x67\xdd\x74\x5d\xdf\xe3\x2e\x47\xb1\x24\x08\x9a\x67\xb2\x82\x5a\xa2\x8c\xb0\x89\x31\x70\xa0\x9a\xec\x25\x12\x34\x23\x5a\x81\x2e\x9c\x49\x86\x02\x92\x01\xc7\x1c\x8d\x0b\x4c\x51\x8c\x64\xa0\x3c\x40\xab\x2d\xd5\x5c\x83\xdf\x2f\xe4\xb9\x80\x32\x83\xd2\x91\x4e\x05\x34\x0c\x3c\xe0\xc0\x76\x64\x96\x5f\x51\x04\xe1\x63\x8a\xc2\x88\x05\xb4\x2c\x2c\x03\x0f\x2b\xe6\xd6\x90\xd9\x6a\x96\xb2\x36\x26\x75\x3e\x70\x86\x06\x1c\x4e\xad\x78\xeb\xc1\x58\xce\x10\x39\x9d\x7b\x02\xe7\xac\x19\x2c\x5e\xab\x18\xe7\x86\x0a\x55\xfc\xf3\xc0\x5b\x82\x73\x2e\xb6\x50\x20\xcf\x8f\x4f\x3b\x6c\x05\x51\x6c\xdf\x32\xcf\xd9\x3b\x3c\x76\x57\xab\x2b\xf7\x99\x57\xea\x76\xe3\x55\x8a\x26\x76\x49\x47\x47\xcb\x92\x4e\xdb\x57\x2f\x7b\x5c\xdf\xec\x36\x7b\x90\x73\x6e\xd7\x5d\x9d\x9b\xc6\xff\x7b\x48\x4c\xdd\xd3\x4f\xdf\xe1\x45\x2a\x79\xaf\x79\x58\x95\x2b\xe8\xf2\x8c\xb2\xb0\x8f\x21\x72\xfe\x03\xc7\x7f\x4b\x4e\xdf\x37\xda\xc7\x4f\x0f\xef\xdf\xe2\x61\x8a\x05\x43\x0c\x81\x73\x41\x49\x71\x9c\x2c\x9d\x10\xb2\xce\x6b\x8d\x0f\x8a\x38\x2f\x89\x67\x16\x23\x8b\x2a\x38\xb0\xa7\x5a\xb8\x45\x33\xff\x57\x20\x8a\x8b\x96\x06\x7d\x77\x77\xbb\x5e\xcf\xd2\x66\xbf\xcc\xda\x38\x97\x5f\xa0\xb2\x7e\x16\x9a\x19\xed\x00\x1c\xee\x27\xad\xa9\xdd\x09\x42\x3b\x08\x9b\xb4\x8e\xd3\xeb\x05\x86\xed\xb3\x2a\xcb\x51\xc6\x3d\xfe\xcd\x3a\xbf\x5c\xdf\x7c\x75\x5e\xc5\x93\x6d\xaf\xdf\xec\xda\x6e\xcf\x75\xf7\xa0\xdf\x2c\xf8\x47\x00\x00\x00\xff\xff\xa9\x67\xb1\x89\x8b\x03\x00\x00")

func stdlibFmtFmtGoBytes() ([]byte, error) {
	return bindataRead(
		_stdlibFmtFmtGo,
		"stdlib/fmt/fmt.go",
	)
}

func stdlibFmtFmtGo() (*asset, error) {
	bytes, err := stdlibFmtFmtGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/fmt/fmt.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x5f, 0x5c, 0x9d, 0xfb, 0xc9, 0x99, 0xaf, 0xe0, 0x10, 0xcb, 0xc7, 0x8, 0x53, 0xfe, 0xfa, 0x20, 0x83, 0x23, 0x18, 0x92, 0xa8, 0x8d, 0xe3, 0x36, 0xd0, 0x5f, 0xab, 0xbf, 0x54, 0x13, 0x28}}
	return a, nil
}

var _stdlibNetUrlUrlGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2d\xca\xe1\x02\x04\x00\x00\xff\xff\xef\xec\x82\xc3\x0c\x00\x00\x00")

func stdlibNetUrlUrlGoBytes() ([]byte, error) {
	return bindataRead(
		_stdlibNetUrlUrlGo,
		"stdlib/net/url/url.go",
	)
}

func stdlibNetUrlUrlGo() (*asset, error) {
	bytes, err := stdlibNetUrlUrlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/net/url/url.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0x9f, 0x49, 0x9f, 0x9b, 0x28, 0xb8, 0xa3, 0x14, 0x72, 0xa, 0x4f, 0xf0, 0x8, 0xca, 0xa8, 0xbd, 0xf2, 0x63, 0xe5, 0xe, 0x36, 0xbe, 0x67, 0x83, 0xe8, 0xb2, 0xbe, 0xec, 0x7b, 0x4a, 0x36}}
	return a, nil
}

var _stdlibStrconvStrconvGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\x8d\x41\x4a\xc5\x30\x10\x40\xd7\x7f\x4e\x31\x04\x17\x09\x94\xc6\x82\x78\x04\xa1\x5b\x3d\x41\x8c\x69\x33\xda\xcc\x94\xe9\xc4\x22\xe2\xdd\xe5\x77\xfd\x78\xef\xed\x29\x7f\xa5\xb5\xe0\x61\x9a\x85\xbf\x01\xa8\xed\xa2\x86\x6e\x25\xab\xfd\x7d\xcc\xd2\x62\x4b\x66\xb5\x9c\xad\x97\x6d\x2b\x1a\x3f\xe5\x27\xb6\x94\x55\x1c\x40\x8c\x38\x9b\x24\xa4\x03\x8f\x2a\x6a\x35\xf1\x07\x2e\xa2\xf8\x22\xda\x92\xcd\x6c\x9e\xd8\x9e\x9f\x3c\x85\x01\xa7\xc7\x30\xc2\xd2\x39\x5f\x8e\x27\x24\xb6\x70\x3f\x13\xaf\xf8\x0b\xb7\x2b\x3a\xbe\x96\x53\xc9\x8a\x77\x6f\x17\xf0\x0f\x53\x70\x03\x52\x80\x9b\x16\xeb\xca\xe8\x1c\xfc\xc1\x7f\x00\x00\x00\xff\xff\x57\xea\x0e\xba\xb8\x00\x00\x00")

func stdlibStrconvStrconvGoBytes() ([]byte, error) {
	return bindataRead(
		_stdlibStrconvStrconvGo,
		"stdlib/strconv/strconv.go",
	)
}

func stdlibStrconvStrconvGo() (*asset, error) {
	bytes, err := stdlibStrconvStrconvGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/strconv/strconv.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0xca, 0xce, 0x4f, 0xfb, 0x91, 0xd0, 0xe4, 0x82, 0x94, 0xba, 0x14, 0xf6, 0x29, 0xde, 0x20, 0x3, 0xa6, 0xd1, 0x5c, 0x5, 0x62, 0x7d, 0x82, 0xde, 0x94, 0xe4, 0x3c, 0x93, 0xfa, 0x29, 0x64}}
	return a, nil
}

var _stdlibStringsStringsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xdb\x30\x10\x86\xcf\xd1\x53\x0c\x26\x07\x1b\x82\x4d\xfb\x0a\xbd\x95\x9e\x4a\x72\x2a\x3d\x4c\x94\x3f\xb6\x52\x59\x12\x9a\x31\x26\x94\x7d\xf7\xc5\xb2\xc3\xb2\xb0\x0b\x39\xec\xc9\x66\x98\xf9\xfe\xef\x57\x62\xfb\x8f\x7b\x90\x68\x76\xa1\x17\x63\xdc\x98\x62\x56\xaa\xcd\xae\xea\x9d\x0e\xd3\xb9\xb5\x71\xec\x46\x56\x1d\x30\x8f\x13\xbc\x47\xee\x6e\xf1\xde\x8d\x6c\x73\xac\x4c\x63\x4c\xd7\xd1\xcf\xe8\x02\xd9\x18\x2c\x2b\x02\x2b\x84\x74\x00\xc1\x63\x44\x50\xa1\x78\x25\x26\x8d\x64\x33\x58\x41\x4c\xe2\x42\xef\x1f\xa9\x2d\x1d\x07\x90\x20\x71\x66\x8d\x79\x9b\x2e\x58\x41\x22\x27\x94\x3c\x5b\x5c\xe8\x0c\x9d\x81\xf0\x86\x75\xa1\xc4\x64\xc8\xe4\xd5\x85\xfe\xc1\x33\xd7\x29\xd8\xe2\x54\x33\xfd\xf9\xbb\x4e\x0f\x85\xb6\xfe\x37\xdb\x97\xfe\x9b\x5d\xe9\xd1\xfe\xc6\x9c\x9d\xa2\xae\xf6\xdf\xda\xdb\x72\xb8\xff\xde\x54\x07\xe2\x72\xd5\x98\x5d\x86\x4e\x39\x50\x55\x99\x97\x52\xf8\x18\x4f\x29\x21\xd3\x3a\x17\x62\xb2\x31\xdd\x97\xa2\x8b\xd1\x46\x17\x9a\x9d\x0e\xc4\xde\xd3\x29\x38\x1b\x2f\x20\x0f\x55\x64\xa1\x91\x53\xc2\x65\x79\x13\x1d\xe0\x32\x4d\x85\x66\x59\xb0\xd9\x6f\x01\xb5\x3c\xa5\xac\xeb\xf6\x0f\x16\xd4\x8b\xb7\x7c\xa8\xfc\x2b\xce\x5f\xa8\xec\x0b\xed\x9d\x72\x09\x78\x5a\xb9\x6c\x7f\xaa\xfc\x1a\x00\x00\xff\xff\xa4\xfd\xed\x60\x9a\x02\x00\x00")

func stdlibStringsStringsGoBytes() ([]byte, error) {
	return bindataRead(
		_stdlibStringsStringsGo,
		"stdlib/strings/strings.go",
	)
}

func stdlibStringsStringsGo() (*asset, error) {
	bytes, err := stdlibStringsStringsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/strings/strings.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0xc3, 0xa8, 0x1d, 0xfe, 0x8b, 0xcd, 0x50, 0xeb, 0xb3, 0x7e, 0xd6, 0x8d, 0xda, 0x27, 0x13, 0xcf, 0x1d, 0x5e, 0xd6, 0x1b, 0xe1, 0x46, 0x67, 0xa5, 0x5, 0xc9, 0xc7, 0x4b, 0x39, 0xec, 0x6a}}
	return a, nil
}

var _stdlibTimeTimeGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xe3\x38\x0c\x3d\xc7\x5f\x41\x04\x7b\xb0\x07\x1d\xdb\xd9\x2e\x02\xec\x20\x3d\x2c\x76\x0e\x7b\x29\x50\x6c\xfa\x03\x8a\xcd\x38\xec\x5a\x94\x21\x51\x49\xd3\x22\xff\xbe\x90\x94\xba\x4e\xdb\x41\x7b\x4a\x24\x3f\xf2\xbd\x47\x52\x1c\x54\xf3\x9f\xea\x10\x84\x34\x66\x19\xe9\xc1\x58\x81\x3c\x9b\xcd\x3b\x92\x9d\xdf\x94\x8d\xd1\x95\x56\x22\x3b\x3c\x68\x8f\x7d\x8f\xb6\x7a\x30\xc7\x4a\xab\xc6\x9a\x79\x56\x64\x59\x55\xc1\x3d\x69\x04\x27\xd6\x37\x12\x8e\x72\x1c\x70\x7a\xf7\x7c\x8a\xa8\xbf\xe0\xa7\xb7\x4a\xc8\x30\x58\x1c\x2c\x3a\x64\x71\x20\x3b\x04\xec\xd5\xe0\xb0\x8d\x1a\x60\x83\x72\x40\x64\x90\x83\x01\x62\x27\x8a\xc5\x85\x70\xe5\x40\x31\x10\xcb\xf2\x0f\x60\xc5\xc6\x61\x63\xb8\x85\xc6\x78\x96\x12\xee\x77\xf8\x9a\x35\x91\xf4\xa4\x29\x11\x84\xf0\x5e\xd9\x0e\x9d\x4c\x40\x9b\x1e\xa1\x7d\x51\x24\x06\xd4\x30\x58\xf3\x48\x5a\x09\xf6\x47\xf8\xfd\xcf\x1a\x8e\xa8\xac\x2b\x47\x4b\xa3\xfc\x28\x22\x7a\x6a\x0c\xbb\x50\xae\xaa\x82\x99\x26\x1e\x11\xe3\x9f\x1b\xf8\xbe\x80\xd5\x0a\x96\xd7\x09\xa3\x1e\x3f\xc2\x2c\x56\xab\xe5\x35\x7c\x87\x45\x00\xa5\x9a\xfe\x6d\xb4\x36\x3c\x0a\x74\xd1\xa2\x45\x20\x07\x6c\xa0\xc5\x2d\x31\xc5\xe8\xad\xb1\xe0\x39\x38\x35\x5b\xf8\xa9\x8e\x60\x6c\x32\x6b\xa3\x70\x03\x6a\x6f\x28\xd4\x89\xb7\xde\x85\x80\xd0\x39\xe7\xa0\x55\xc7\x9e\xba\x9d\x80\x53\x7b\xe2\xce\xa5\xea\x3f\x19\x46\x10\xab\xd8\x51\xa2\xcd\xaa\x2a\xb6\xd8\xa4\x4a\xc7\x7e\xb1\xd7\x1b\xb4\x81\x2f\x11\x13\x83\x1a\xed\x5c\x41\x4b\x7b\x6a\xf1\x47\x56\x55\xb3\x73\x93\x7e\xdc\xc4\xec\xe5\x3a\x1e\xc3\x87\xad\x96\xf2\xce\x12\x4b\x1e\x8b\x99\x27\x60\x15\x51\xb7\xd4\xf7\x94\x2e\x8a\x02\xaa\x0a\x86\x00\x74\xb0\xa8\xeb\x7a\x2a\x87\xf7\x68\xe5\x3c\x14\xd8\xa1\x7d\xa7\x2b\x98\x9f\xe8\xd2\xbe\x17\x1a\xfa\xe3\x44\x99\x0b\xd2\x16\xf5\xa5\xa2\x28\xe2\x25\xec\xac\xcc\x15\xdf\x26\x0e\x2e\x55\xb9\xd8\xb0\x89\xea\x34\x16\xd9\x5e\xd9\x8b\xdb\x1b\xd8\x7a\x6e\xf2\x22\xe8\x85\xe7\x6c\x16\xdf\x50\xf9\x2f\x1e\x2c\x09\xe6\xf3\xc5\xbc\xc8\x66\x16\xc5\x5b\x8e\x56\xe1\xdb\xf8\x93\x9d\xf2\x34\x15\xeb\xb7\xf9\xd7\x5f\x4b\x5d\xd7\xf5\xaf\xb3\xbf\x25\xb9\x25\xf6\x82\x17\x26\xe2\xc5\x27\x24\xcb\xfa\x92\x65\xf9\x01\xc7\x5b\xaa\x7f\x8c\xb7\x13\xa2\x78\xfc\x84\xe6\x3a\xf2\xbc\x23\xfa\x0a\xdb\xba\x47\x1c\x60\x50\xde\x61\x5a\x3c\x8d\xb7\x16\x59\xa0\x33\xd6\x78\x21\xc6\xf8\x9a\x94\x40\x8f\xca\xa5\x59\x1f\x37\x44\x5b\xa6\x25\xc6\xd8\x29\xa1\x3d\x86\x77\xf6\x84\xd6\xbc\x22\x9a\x94\x38\xb1\x88\x81\xb3\x3c\xd2\x1a\x5b\x8a\x5b\xa5\xcc\x82\xb5\x84\xc8\xdb\x60\xb0\xf8\xc0\xa1\x3a\x28\x12\x60\x3c\xc0\x9d\x35\x9a\x1c\xe6\x21\x2a\x0e\xa3\x45\x67\xfa\x3d\x5e\x81\xc5\x07\x6c\x42\x34\x38\x94\xb0\x6b\x8d\x97\xd7\xaf\xbf\x2d\x0a\x38\x15\xf3\x2b\x68\x8b\xec\x94\xfd\x1f\x00\x00\xff\xff\x0c\x1b\x78\xfb\xe3\x05\x00\x00")

func stdlibTimeTimeGoBytes() ([]byte, error) {
	return bindataRead(
		_stdlibTimeTimeGo,
		"stdlib/time/time.go",
	)
}

func stdlibTimeTimeGo() (*asset, error) {
	bytes, err := stdlibTimeTimeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/time/time.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0x6, 0xca, 0x95, 0x4f, 0xec, 0xcb, 0x84, 0xd1, 0xd6, 0xa, 0xcb, 0xb7, 0xeb, 0x21, 0xa4, 0x7c, 0x7d, 0xf5, 0xe5, 0xc5, 0x2f, 0x1f, 0x6a, 0xe4, 0x7a, 0xb, 0xbb, 0x7d, 0x21, 0xba, 0x8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/runtime/runtime.go": internalRuntimeRuntimeGo,

	"macro/raw.go": macroRawGo,

	"macro/rawfile.go": macroRawfileGo,

	"macro/rewrite.go": macroRewriteGo,

	"macro/runtime.go": macroRuntimeGo,

	"stdlib/encoding/json/json.go": stdlibEncodingJsonJsonGo,

	"stdlib/errors/errors.go": stdlibErrorsErrorsGo,

	"stdlib/fmt/fmt.go": stdlibFmtFmtGo,

	"stdlib/net/url/url.go": stdlibNetUrlUrlGo,

	"stdlib/strconv/strconv.go": stdlibStrconvStrconvGo,

	"stdlib/strings/strings.go": stdlibStringsStringsGo,

	"stdlib/time/time.go": stdlibTimeTimeGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"runtime": &bintree{nil, map[string]*bintree{
			"runtime.go": &bintree{internalRuntimeRuntimeGo, map[string]*bintree{}},
		}},
	}},
	"macro": &bintree{nil, map[string]*bintree{
		"raw.go":     &bintree{macroRawGo, map[string]*bintree{}},
		"rawfile.go": &bintree{macroRawfileGo, map[string]*bintree{}},
		"rewrite.go": &bintree{macroRewriteGo, map[string]*bintree{}},
		"runtime.go": &bintree{macroRuntimeGo, map[string]*bintree{}},
	}},
	"stdlib": &bintree{nil, map[string]*bintree{
		"encoding": &bintree{nil, map[string]*bintree{
			"json": &bintree{nil, map[string]*bintree{
				"json.go": &bintree{stdlibEncodingJsonJsonGo, map[string]*bintree{}},
			}},
		}},
		"errors": &bintree{nil, map[string]*bintree{
			"errors.go": &bintree{stdlibErrorsErrorsGo, map[string]*bintree{}},
		}},
		"fmt": &bintree{nil, map[string]*bintree{
			"fmt.go": &bintree{stdlibFmtFmtGo, map[string]*bintree{}},
		}},
		"net": &bintree{nil, map[string]*bintree{
			"url": &bintree{nil, map[string]*bintree{
				"url.go": &bintree{stdlibNetUrlUrlGo, map[string]*bintree{}},
			}},
		}},
		"strconv": &bintree{nil, map[string]*bintree{
			"strconv.go": &bintree{stdlibStrconvStrconvGo, map[string]*bintree{}},
		}},
		"strings": &bintree{nil, map[string]*bintree{
			"strings.go": &bintree{stdlibStringsStringsGo, map[string]*bintree{}},
		}},
		"time": &bintree{nil, map[string]*bintree{
			"time.go": &bintree{stdlibTimeTimeGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
